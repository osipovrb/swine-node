import { SwineEntity } from '../../../entities/SwineEntity.js';
import { daysBetweenDates } from '../../../helpers/DaysBetweenDates.js';
import { IConfig } from '../../interfaces/IConfig.js';
import { ILogger } from '../../interfaces/ILogger.js';
import { IStorage } from '../../interfaces/IStorage.js';
import { ISwineFather } from '../../interfaces/ISwineFather.js';
import { LoggerFactory } from '../logger/LoggerFactory.js';
import { Validator } from './Validator.js';

export class SwineFather implements ISwineFather {
  private readonly logger: ILogger = LoggerFactory(SwineFather.name);

  private readonly validator: Validator;

  constructor(
    private readonly config: IConfig,
    private readonly swineStorage: IStorage<SwineEntity>,
  ) {
    this.logger.log('‚úì Started');
    this.validator = new Validator(this.config);
  }

  async name(
    roomId: string,
    userId: string,
    swineName: string,
  ): Promise<string> {
    const validation = this.validator.validateSwineName(swineName);

    if (!validation.isValid) {
      return `—Ç–∞–∫ –Ω–∞–∑—ã–≤–∞—Ç—å —Å–≤–∏–Ω–∞ –Ω–µ–ª—å–∑—è: ${validation.errors.join(', ')}`;
    }

    const name = validation.sanitizedValue;

    const [swine] = await this.swineStorage.search({ roomId, userId });

    if (swine) {
      await this.swineStorage.update(swine.id, { name });
      this.logger.log(
        `Swine "${swine.name}" (id ${swine.id}) renamed to "${name}"`,
      );
    } else {
      const { id } = await this.swineStorage.create(
        new SwineEntity({ name, userId, roomId }),
      );
      this.logger.log(`Created new swine "${name}" (id ${id})`);
    }

    return `—Ç–µ–ø–µ—Ä—å —Ç–≤–æ–µ–≥–æ —Å–≤–∏–Ω–∞ –∑–æ–≤—É—Ç "${swineName}", –Ω–æ—Å–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é! üêñ`;
  }

  async my(roomId: string, userId: string): Promise<string> {
    const [swine] = await this.swineStorage.search({ roomId, userId });

    if (!swine) {
      return `—É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–≤–∏–Ω–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –µ–≥–æ –∑–∞–≤–µ—Å—Ç–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –í–≤–µ–¥–∏ /name <–∏–º—è_—Ç–≤–æ–µ–≥–æ_—Å–≤–∏–Ω–∞>`;
    }

    const swineAge = daysBetweenDates(new Date(), swine.createdAt);
    return `—Ç–≤–æ–µ–≥–æ üêñ –∑–æ–≤—É—Ç ${swine.name}, –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç –≤ –¥–Ω—è—Ö: ${swineAge}`;
  }
}
